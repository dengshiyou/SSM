<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
<display-name>SSM</display-name>

<!-- 监听spring上下文容器 -->  
   <listener>  
        <listener-class>  
            org.springframework.web.context.ContextLoaderListener  
        </listener-class>  
   </listener>
   
<!-- 加载所有spring的xml配置文件到 spring的上下文容器中 -->  
   <context-param>  
        <param-name>contextConfigLocation</param-name>  
    	<param-value>
    		classpath:application-context.xml,classpath:config/application-quartz.xml
    	</param-value>
    </context-param>
    
    <!-- 配置Spring MVC DispatcherServlet  springmvc的前端控制器-->  
    <servlet>  
        <servlet-name>MVC</servlet-name>  
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" -->
        <!-- 初始化参数 -->  
        <init-param>  
            <!-- 加载SpringMVC的xml到 spring的上下文容器中 -->  
            <param-name>contextConfigLocation</param-name>  
            <param-value>classpath:application-context.xml</param-value>  
        </init-param>   
        <load-on-startup>1</load-on-startup>  
    </servlet>  
  
    <!-- 配置DispatcherServlet所需要拦截的 url  可以配置多个 -->  
    <servlet-mapping>  
        <servlet-name>MVC</servlet-name>  
        <url-pattern>*.do</url-pattern>  
    </servlet-mapping> 
    
    <servlet-mapping>  
        <servlet-name>MVC</servlet-name>  
        <url-pattern>*.htm</url-pattern>  
    </servlet-mapping> 
    
    
    <!-- post、get提交乱码处理 -->
    <filter>
    	<!-- 设置过滤器名字 -->
		<filter-name>charsetFilter</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>    
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>charsetFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!-- 配置log4j -->
	<!-- Spring加载log4j.properties，它提供了一个Log4jConfigListener，本身就能通过web.xml配置从指定位置加载log4j配置文件和log4j的输出路径，
	要注意的是 :Log4jConfigListener必须要在Spring的Listener之前。
	设置由Sprng载入的Log4j配置文件位置 -->
	<context-param> 
	    <param-name>log4jConfigLocation</param-name> 
	    <param-value>WEB-INF/classes/log4j.properties</param-value> 
	</context-param> 
	<!--  Spring刷新Log4j配置文件变动的间隔,单位为毫秒 -->
	<context-param> 
	    <param-name>log4jRefreshInterval</param-name> 
	    <param-value>10000</param-value> 
	</context-param> 
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>SSM</param-value>
	</context-param>
	<listener> 
    	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> 
	</listener>
	
	<!-- 项目首页 ,设置经过Controller,这样的话就会加载到配置的常量路径属性-->
	 <welcome-file-list>
	    <welcome-file>index.do</welcome-file>
	 </welcome-file-list>
</web-app>